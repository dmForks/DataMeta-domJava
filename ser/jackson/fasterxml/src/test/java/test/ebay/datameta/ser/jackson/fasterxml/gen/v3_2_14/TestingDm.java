package test.ebay.datameta.ser.jackson.fasterxml.gen.v3_2_14;
import java.time.ZonedDateTime;
import java.util.List;
import java.util.Set;

import org.ebay.datameta.dom.Verifiable;
import java.util.Objects;
import java.util.StringJoiner;
import org.ebay.datameta.dom.VerificationException;
import org.ebay.datameta.util.jdk.SemanticVersion;
import static org.ebay.datameta.dom.CannedRegexUtil.getCannedRegEx;

/**

 * This class is generated by
 * <a href='https://github.com/eBayDataMeta/DataMeta'>DataMeta</a>.
 */
public class TestingDm implements Verifiable {

    public static final SemanticVersion VERSION = SemanticVersion.parse("3.2.14");



    private String id;
    private Colors color;
    private Set<Long> longs;
    private List<ZonedDateTime> whens;
    private java.net.URL photoPic;

    public void setId(final String newValue) {
        if(newValue == null) throw new IllegalArgumentException(
                "NULL passed to the setter of the required field 'id' on the class test.ebay.datameta.ser.jackson.fasterxml.gen.v3_2_14.TestingDm.");
        this.id = newValue;
    }

    public String getId() {return this.id; }
    public void setColor(final Colors newValue) {
        if(newValue == null) throw new IllegalArgumentException(
                "NULL passed to the setter of the required field 'color' on the class test.ebay.datameta.ser.jackson.fasterxml.gen.v3_2_14.TestingDm.");
        this.color = newValue;
    }

    public Colors getColor() {return this.color; }

    public void setLongs(final Set<Long> newValue) {this.longs = newValue; }

    public Set<Long> getLongs() {return this.longs; }

    public void setWhens(final List<ZonedDateTime> newValue) {this.whens = newValue; }

    public List<ZonedDateTime> getWhens() {return this.whens; }

    public void setPhotoPic(final java.net.URL newValue) {this.photoPic = newValue; }

    public java.net.URL getPhotoPic() {return this.photoPic; }

    /**
    * If there is class type mismatch, somehow we are comparing apples to oranges, this is an error, not
    * a not-equal condition.
    */
    @SuppressWarnings("EqualsWhichDoesntCheckParameterClass") @Override public boolean equals(Object other) {
        return Objects.deepEquals(new Object[]{this.id},
          new Object[]{((TestingDm) other).id});
    }

    @Override public int hashCode() {// null - safe: result = 31 * result + (element == null ? 0 : element.hashCode());
        return Objects.hash(this.id);
    }

    public void verify() {

        StringJoiner missingFields = new StringJoiner(", ");
        if(id == null) missingFields.add("id");
        if(color == null) missingFields.add("color");
        if(missingFields.length() != 0) throw new VerificationException(getClass().getSimpleName() + ": required fields not set: " + missingFields);




    }

    public final SemanticVersion getVersion() { return VERSION; }
}
