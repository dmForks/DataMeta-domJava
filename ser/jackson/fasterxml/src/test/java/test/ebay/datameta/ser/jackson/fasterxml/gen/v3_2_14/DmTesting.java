package test.ebay.datameta.ser.jackson.fasterxml.gen.v3_2_14;
import java.math.BigDecimal;
import java.time.ZonedDateTime;
import java.util.List;

import org.ebay.datameta.dom.Verifiable;
import java.util.Objects;
import java.util.StringJoiner;
import org.ebay.datameta.dom.VerificationException;
import org.ebay.datameta.util.jdk.SemanticVersion;
import static org.ebay.datameta.dom.CannedRegexUtil.getCannedRegEx;

/**

 * This class is generated by
 * <a href='https://github.com/eBayDataMeta/DataMeta'>DataMeta</a>.
 */
public class DmTesting implements Verifiable {

    public static final SemanticVersion VERSION = SemanticVersion.parse("3.2.14");



    private Integer intVal;
    private Long longVal;
    private String name;
    private String email;
    private ZonedDateTime created;
    private BigDecimal salary;
    private Colors color;
    private TestingDm embedded;
    private List<TestingDm> embs;
    private Boolean isCommitted;

    public void setIntVal(final Integer newValue) {
        if(newValue == null) throw new IllegalArgumentException(
                "NULL passed to the setter of the required field 'intVal' on the class test.ebay.datameta.ser.jackson.fasterxml.gen.v3_2_14.DmTesting.");
        this.intVal = newValue;
    }

    public Integer getIntVal() {return this.intVal; }
    public void setLongVal(final Long newValue) {
        if(newValue == null) throw new IllegalArgumentException(
                "NULL passed to the setter of the required field 'longVal' on the class test.ebay.datameta.ser.jackson.fasterxml.gen.v3_2_14.DmTesting.");
        this.longVal = newValue;
    }

    public Long getLongVal() {return this.longVal; }

    public void setName(final String newValue) {this.name = newValue; }

    public String getName() {return this.name; }
    public void setEmail(final String newValue) {
        if(newValue == null) throw new IllegalArgumentException(
                "NULL passed to the setter of the required field 'email' on the class test.ebay.datameta.ser.jackson.fasterxml.gen.v3_2_14.DmTesting.");
        this.email = newValue;
    }

    public String getEmail() {return this.email; }
    public void setCreated(final ZonedDateTime newValue) {
        if(newValue == null) throw new IllegalArgumentException(
                "NULL passed to the setter of the required field 'created' on the class test.ebay.datameta.ser.jackson.fasterxml.gen.v3_2_14.DmTesting.");
        this.created = newValue;
    }

    public ZonedDateTime getCreated() {return this.created; }
    public void setSalary(final BigDecimal newValue) {
        if(newValue == null) throw new IllegalArgumentException(
                "NULL passed to the setter of the required field 'salary' on the class test.ebay.datameta.ser.jackson.fasterxml.gen.v3_2_14.DmTesting.");
        this.salary = newValue;
    }

    public BigDecimal getSalary() {return this.salary; }

    public void setColor(final Colors newValue) {this.color = newValue; }

    public Colors getColor() {return this.color; }
    public void setEmbedded(final TestingDm newValue) {
        if(newValue == null) throw new IllegalArgumentException(
                "NULL passed to the setter of the required field 'embedded' on the class test.ebay.datameta.ser.jackson.fasterxml.gen.v3_2_14.DmTesting.");
        this.embedded = newValue;
    }

    public TestingDm getEmbedded() {return this.embedded; }

    public void setEmbs(final List<TestingDm> newValue) {this.embs = newValue; }

    public List<TestingDm> getEmbs() {return this.embs; }
    public void setIsCommitted(final Boolean newValue) {
        if(newValue == null) throw new IllegalArgumentException(
                "NULL passed to the setter of the required field 'isCommitted' on the class test.ebay.datameta.ser.jackson.fasterxml.gen.v3_2_14.DmTesting.");
        this.isCommitted = newValue;
    }

    public Boolean getIsCommitted() {return this.isCommitted; }

    /**
    * If there is class type mismatch, somehow we are comparing apples to oranges, this is an error, not
    * a not-equal condition.
    */
    @SuppressWarnings("EqualsWhichDoesntCheckParameterClass") @Override public boolean equals(Object other) {
        return Objects.deepEquals(new Object[]{this.intVal, this.longVal},
          new Object[]{((DmTesting) other).intVal, ((DmTesting) other).longVal});
    }

    @Override public int hashCode() {// null - safe: result = 31 * result + (element == null ? 0 : element.hashCode());
        return Objects.hash(this.intVal, this.longVal);
    }

    public void verify() {

        StringJoiner missingFields = new StringJoiner(", ");
        if(intVal == null) missingFields.add("intVal");
        if(longVal == null) missingFields.add("longVal");
        if(email == null) missingFields.add("email");
        if(created == null) missingFields.add("created");
        if(salary == null) missingFields.add("salary");
        if(embedded == null) missingFields.add("embedded");
        if(isCommitted == null) missingFields.add("isCommitted");
        if(missingFields.length() != 0) throw new VerificationException(getClass().getSimpleName() + ": required fields not set: " + missingFields);


        if(!getCannedRegEx("email").matcher(email).matches())
            throw new VerificationException("Variable \"email\" == {{" + email + "}} didn't match canned expression \"email\"" );

        embedded.verify();
        if(embs != null) embs.forEach(Verifiable::verify);

    }

    public final SemanticVersion getVersion() { return VERSION; }
}
