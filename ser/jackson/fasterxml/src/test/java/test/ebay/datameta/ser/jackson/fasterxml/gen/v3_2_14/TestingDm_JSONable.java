
package test.ebay.datameta.ser.jackson.fasterxml.gen.v3_2_14;

import static org.ebay.datameta.ser.jackson.fasterxml.JacksonUtil.*;
import org.ebay.datameta.ser.jackson.fasterxml.JacksonUtil;
import org.ebay.datameta.ser.jackson.fasterxml.Jsonable;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;

import java.io.IOException;

import static com.fasterxml.jackson.core.JsonToken.END_ARRAY;
import static com.fasterxml.jackson.core.JsonToken.END_OBJECT;

/**
 * Json Serializer/Deserializer for the type {@link TestingDm}.
 * This class is completely immutable, state-free and therefore thread-safe, implemented and used as a singleton.
 */
/**

 * This class is generated by
 * <a href='https://github.com/eBayDataMeta/DataMeta'>DataMeta</a>.
 */
public class TestingDm_JSONable extends Jsonable<TestingDm> {

  /** An instance of the {@link JacksonUtil} - can use it anywhere because {@link JacksonUtil} is a singleton,
   * immutable and state-free.
   */
  public final static JacksonUtil JU = JacksonUtil.getInstance();

  public static TestingDm_JSONable getInstance() { return INSTANCE; }

  private final static TestingDm_JSONable INSTANCE = new TestingDm_JSONable();

  /**
   * Constructor is private - use {@link #getInstance()} to get an instance.
   */
  private TestingDm_JSONable() {}

  public void write(final JsonGenerator out, final TestingDm value) throws IOException {
    value.verify();

    out.writeStringField("color", value.getColor().name());
    out.writeStringField("id", value.getId());
    if(value.getLongs() != null) JU.writeSetLong("longs", out, value.getLongs());
    if(value.getWhens() != null) JU.writeListZonedDateTime("whens", out, value.getWhens());
  }

  public TestingDm readInto(final JsonParser in, final TestingDm target, final boolean ignoreUnknown) throws IOException {
    while(in.nextToken() != END_OBJECT) {
      final String fldName = in.getCurrentName();
      if(fldName != null) {
        in.nextToken();
        switch(fldName){
            case "*v*": break; // skip the version field
            case "*dt*": break;  // skip the data type field

            case "color":
              target.setColor(Enum.valueOf(Colors.class, JU.readText(in)));
              break;

            case "id":
              target.setId(JU.readText(in));
              break;

            case "longs":
              target.setLongs(JU.readSetLong(in));
              break;

            case "whens":
              target.setWhens(JU.readListZonedDateTime(in));
              break;

          default:
            if(!ignoreUnknown) throw new IllegalArgumentException("Unhandled field \"" + fldName + '\"');
        }
      }
    }
    return target;
  }

  public TestingDm read(final JsonParser in, boolean ignoreUnknown) throws IOException {
    return readInto(in, new TestingDm(), ignoreUnknown);
  }
}
